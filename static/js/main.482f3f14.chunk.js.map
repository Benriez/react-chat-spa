{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","auth","firestore","SignIn","onClick","provider","GoogleAuthProvider","signInWithPopup","SignOut","currentUser","signOut","ChatRoom","dummy","useRef","messagesRef","collection","query","orderBy","limit","useCollectionData","idField","messages","useState","formValue","setFormValue","sendMessage","e","a","preventDefault","uid","photoURL","add","text","createdAt","FieldValue","serverTimestamp","current","scrollIntoView","behaviour","map","msg","ChatMessage","message","id","ref","onSubmit","value","onChange","target","placeholder","type","disabled","props","messageClass","className","src","App","useAuthState","user","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oRAUAA,IAASC,cAAc,CACnBC,OAAQ,0CACRC,WAAY,uCACZC,UAAW,uBACXC,cAAe,mCACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAGnB,IAAMC,EAAOT,IAASS,OAChBC,EAAYV,IAASU,YAqB3B,SAASC,IAMP,OACE,wBAAQC,QANe,WACvB,IAAMC,EAAW,IAAIb,IAASS,KAAKK,mBACnCL,EAAKM,gBAAgBF,IAIrB,iCAMJ,SAASG,IACP,OAAOP,EAAKQ,aACV,wBAAQL,QAAS,kBAAMH,EAAKS,WAA5B,sBAKJ,SAASC,IAEP,IAAMC,EAAQC,mBACRC,EAAcZ,EAAUa,WAAW,YACnCC,EAAQF,EAAYG,QAAQ,aAAaC,MAAM,IAErD,EAAmBC,YAAkBH,EAAO,CAACI,QAAS,OAA/CC,EAAP,oBAEA,EAAkCC,mBAAS,IAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KAEMC,EAAW,uCAAG,WAAMC,GAAN,mBAAAC,EAAA,6DAClBD,EAAEE,iBADgB,EAEM3B,EAAKQ,YAAtBoB,EAFW,EAEXA,IAAKC,EAFM,EAENA,SAFM,SAIZhB,EAAYiB,IAAI,CAClBC,KAAMT,EACNU,UAAWzC,IAASU,UAAUgC,WAAWC,kBACzCN,MACAC,aARc,OAWlBN,EAAa,IAEbZ,EAAMwB,QAAQC,eAAe,CAACC,UAAW,WAbvB,2CAAH,sDAgBjB,OACE,qCACE,iCACGjB,GAAYA,EAASkB,KAAI,SAAAC,GAAG,OAAI,cAACC,EAAD,CAA0BC,QAASF,GAAjBA,EAAIG,OAEvD,sBAAMC,IAAKhC,OAIb,uBAAMiC,SAAUpB,EAAhB,UACE,uBAAOqB,MAAOvB,EAAWwB,SAAU,SAACrB,GAAD,OAAOF,EAAaE,EAAEsB,OAAOF,QAAQG,YAAY,uBACpF,wBAAQC,KAAK,SAASC,UAAW5B,EAAjC,sCAQR,SAASkB,EAAYW,GACnB,MAA8BA,EAAMV,QAA7BV,EAAP,EAAOA,KAAMH,EAAb,EAAaA,IAAKC,EAAlB,EAAkBA,SAEZuB,EAAexB,IAAQ5B,EAAKQ,YAAYoB,IAAM,OAAS,WAE7D,OACE,sBAAKyB,UAAS,kBAAaD,GAA3B,UACE,qBAAKE,IAAKzB,IACV,4BAAIE,OAQKwB,MAnGf,WACE,MAAeC,YAAaxD,GAArByD,EAAP,oBAEA,OACE,sBAAKJ,UAAU,MAAf,UACE,yBAAQA,UAAU,aAAlB,UACE,sEACA,cAAC9C,EAAD,OAGF,kCACGkD,EAAO,cAAC/C,EAAD,IAAe,cAACR,EAAD,UCvBhBwD,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.482f3f14.chunk.js","sourcesContent":["import React, { useRef, useState } from 'react';\nimport './App.css';\n\nimport firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\n\nimport { useAuthState } from 'react-firebase-hooks/auth';\nimport { useCollectionData } from 'react-firebase-hooks/firestore';\n\nfirebase.initializeApp({\n    apiKey: \"AIzaSyDitZDDdU4mMV28W6uR6m8GU5VVTsaxUkk\",\n    authDomain: \"project-hermes-303c7.firebaseapp.com\",\n    projectId: \"project-hermes-303c7\",\n    storageBucket: \"project-hermes-303c7.appspot.com\",\n    messagingSenderId: \"656802380752\",\n    appId: \"1:656802380752:web:18f4ef29daf74eb86a97d5\",\n    measurementId: \"G-27XM7WXP11\"\n})\n\nconst auth = firebase.auth();\nconst firestore = firebase.firestore();\n\n\nfunction App() {\n  const [user] = useAuthState(auth);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>‚öõÔ∏èüî•üí¨</h1>\n        <SignOut />\n      </header>\n\n      <section>\n        {user ? <ChatRoom /> : <SignIn />}\n      </section>\n    </div>\n  );\n}\n\n\nfunction SignIn(){\n  const signInWithGoogle = () => {\n    const provider = new firebase.auth.GoogleAuthProvider();\n    auth.signInWithPopup(provider);\n  }\n\n  return (\n    <button onClick={signInWithGoogle}>Sign in with Google</button>\n  )\n\n}\n\n\nfunction SignOut(){\n  return auth.currentUser && (\n    <button onClick={() => auth.signOut()}>Sign out</button>\n  )\n}\n\n\nfunction ChatRoom(){\n\n  const dummy = useRef()\n  const messagesRef = firestore.collection('messages');\n  const query = messagesRef.orderBy('createdAt').limit(25);\n\n  const [messages] = useCollectionData(query, {idField: 'id'});\n\n  const [formValue, setFormValue] = useState('');\n\n  const sendMessage = async(e) => {\n    e.preventDefault();\n    const {uid, photoURL} = auth.currentUser;\n\n    await messagesRef.add({\n        text: formValue,\n        createdAt: firebase.firestore.FieldValue.serverTimestamp(),\n        uid,\n        photoURL\n    });\n\n    setFormValue('');\n\n    dummy.current.scrollIntoView({behaviour: 'smooth'});\n  }\n\n  return (\n    <>\n      <main>\n        {messages && messages.map(msg => <ChatMessage key={msg.id} message={msg} />)}\n\n        <span ref={dummy}></span>\n\n      </main>\n\n      <form onSubmit={sendMessage}>\n        <input value={formValue} onChange={(e) => setFormValue(e.target.value)} placeholder=\"say something nice\" />\n        <button type=\"submit\" disabled={!formValue}>üïäÔ∏è</button>\n\n      </form>\n    </>\n  )\n}\n\n\nfunction ChatMessage(props){\n  const {text, uid, photoURL} = props.message;\n\n  const messageClass = uid === auth.currentUser.uid ? 'sent' : 'received';\n\n  return (\n    <div className={`message ${messageClass}`}>\n      <img src={photoURL} />\n      <p>{text}</p>\n    </div>\n  \n  )\n}\n\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}